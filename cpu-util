#!/bin/bash

VERSION=1.7.4

if [ "$EUID" -ne 0 ]
	then
		echo -ne "\n[!] please run as root\n"
	exit
fi

# Color
NOCOLOR='\033[0m'
WHITE='\033[1;37m'

# init global var
d_cores=$(cat /proc/cpuinfo | grep processor | wc -l)
s_cores=$(ls /sys/devices/system/cpu/ | grep -i "cpu[0-9]" | wc -l)
core_="$(($d_cores-1))"

cpu_model=$(cat /proc/cpuinfo | grep "model name" | head -n 1 | cut -b14-)
host=$(sudo dmidecode | grep Version | sed -n '2p' | cut -b 11-)
kernel=$(hostnamectl | grep "Kernel" | cut -b 21-)
os=$(hostnamectl | grep "Operating System" | cut -b 21-)
arch=$(hostnamectl | grep "Architecture" | cut -b 21-)


cols=$(tput cols)
rows=$(tput lines)

if [[ $# -eq 0 ]]
	then
		echo -ne "\n[?] type -h / --help for usage\n"

elif [[ $1 == "-h" || $1 == "--help" ]]
	then
		clear
		echo -e "\t   == CPU Utillity =="

		echo -ne " \n--------------------------------------- "
		echo -ne " \n                         | Avail Mode |"
		echo -e  " \n                         --------------\n"

		echo -e " [1] Monitoring \t[ -mo ]"
		echo -e " [2] Set Max Frequency \t[ -sf ]"
		echo -e " [3] Core Manager \t[ -cm ]"

		echo -ne " \n--------------------------------------- "
		echo -ne " \n                             | Detail |"
		echo -e  " \n                             ----------\n"

		echo -e "-mo / --monitoring \n\twatch system usage every 1 sec\n"
		echo -e "-sf / --set-freq [ freq in MHz | show ]\n\tset MAX freq for all CPU cores\n"
		echo -e "-cm / --core-manager [ 0/1 | show ]\n\tturn on/off half of CPU cores\n"
		echo -e "-h / --help \n\tshow help page"
		echo -e "-v / --version \n\tprint script version"

		echo -ne " \n--------------------------------------- "
		echo -ne " \n                            | Example |"
		echo -e  " \n                            -----------\n"

		echo -e ">> sudo cpu-util -mo"
		echo -e ">> sudo cpu-util -sf 1000000"
		echo -e ">> sudo cpu-util -sf show"
		echo -e ">> sudo cpu-util -cm 0"
		echo -e ">> sudo cpu-util -cm show"


elif [[ $1 == "-mo" || $1 == "--monitoring" ]]
  then
  	clear
    while true
		do
			if [[ $(tput cols) -ne $cols || $(tput lines) -ne $rows ]]
				then
					cols=$(tput cols)
					rows=$(tput lines)
					clear
			fi

			if [[ $(cat /proc/cpuinfo | grep processor | wc -l) -ne $d_cores ]]
				then
					echo -e "\n[!] WARNING | system changed\n"
					exit
			fi

			uptime_=$(uptime -p | cut -b 4-)

			cpu_usage_=$(grep 'cpu ' /proc/stat | awk '{cpu_usage=($2+$4)*100/($2+$4+$5)} END {printf "%0.2f %", cpu_usage}')
			cpu_temp_=$(sensors | egrep "Core [0-$s_cores]" | cut -b 17-18 | sed -z 's/\n/ Â°C-/g')
			sys_memory_=$(awk '/^Mem/ {print $3 " MB / " $2 " MB"}' <(free -m))
			cpu_freq_=$(cat /proc/cpuinfo | grep -i "cpu MHz" | cut -b 12-20 | sed -z 's/\n/ MHz-/g')

    echo -ne "
[ System Monitoring ] [ $(date +%H:%M:%S) ]

[+] Proc \t$cpu_model
[+] Uptime \t$uptime_
[+] Host \t$host
[+] Kernel \t$kernel
[+] OS \t\t$os $arch

[+] cpu \t$cpu_usage_
[+] Mem \t$sys_memory_
[+] Core \t$d_cores / $s_cores Cores
[+] Freq|Temp \t$(echo $cpu_freq_ | sed -z 's/-/\n\t\t/g') $(tput cup 12 32 && echo $cpu_temp_ | sed 's/-/\n\t\t\t\t/g') "		

	    tput cup 0 0
	    sleep 1
	done
	# [+] Temp \t$(echo $temp | sed 's/-/\n\t\t/g') $(echo $cpu | sed -z 's/-/\n\t\t/g')


elif [[ $1 == "-sf" || $1 == "--set-freq" ]]
	then
		clear

		if ! [[ $2 =~ ^[0-9]+$ || $2 == "show" ]]
			then
				echo -ne "\n[!] ERROR | argument not valid '$2'\n"
				exit
		fi

		if [[ $2 =~ "show" ]]
			then
				clear

				for i in $(seq 0 $core_)
					do
						buffer_info=$(cat "/sys/devices/system/cpu/cpu$i/cpufreq/cpuinfo_max_freq" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
						buffer_scaling=$(cat "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

						echo -en "Scaling Freq Core $i \t=> $buffer_scaling / $buffer_info MHz\n"	
				done
		else
			for i in $(seq 0 $core_)
				do
					# echo -ne "Core $i \t=> " && echo -ne $2 | sudo tee "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq" && echo " MHz"
					file="/sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq"
					su -c "echo $2 > '$file'"

					echo -e "Core $i \t=> $(echo $2 | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta') MHz"
				done
		fi


elif [[ $1 == "-cm" || $1 == "--core-manager" ]]
	then
		clear

		if ! [[ $2 =~ ^[0-9]+$ || $2 == "show" ]]
			then
				echo -ne "\n[!] ERROR | argument not valid '$2'\n"
				exit
		fi

		_cores="$(($s_cores/2))"
		cores_="$(($s_cores-1))"

		if [[ $2 =~ "show" ]]
			then
				echo  -e "Core 0 > [always ON]"
				for i in $(seq 1 $cores_)
					do				
						file="/sys/devices/system/cpu/cpu$i/online"
						value=$(cat $file)

						echo  -e "Core $i > $([[ $value = 1 ]] && echo "ON" || echo "Off") "
					done
		else
			for i in $(seq $_cores $cores_)
				do
					file="/sys/devices/system/cpu/cpu$i/online"
					su -c "echo $2 > '$file'"

					echo  -e "Core $i > $2 $([[ $2 = 1 ]] && echo "[ON]" || echo "[Off]") "
				done
		fi


elif [[ $1 == "-v" || $1 == "--version" ]]
	then
		clear
		echo -e "\t   == CPU Utillity =="
		echo -ne "\n[+] Ver $VERSION"
		echo -ne "\n[+] by berrabe"

		echo -e "\n\n[!] Keep It Simple"


else
	echo -e "\n[!] ERROR | Mode Not Found"

fi


